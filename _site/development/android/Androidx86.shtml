<!DOCTYPE html>
<html dir="ltr">

<!-- #BeginTemplate "../../Elvenware02.dwt" -->

<head>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<!-- #BeginEditable "doctitle" -->
<title>Android x86 - Android for the PC</title>
<meta name="description" content="Installing Android x86 on VirtualBox" />
<meta name="keywords" content="VirtualBox Android x86" />
<!-- #EndEditable -->
<!--#include virtual="/charlie/head_links.inc" -->
<!-- #BeginEditable "docScripts" -->
<!-- #EndEditable -->
</head>

<body>

<div id="container">
	<!--#include virtual="/charlie/more.inc" -->
	<article>
		<figure>
			<img alt="Elvenware" src="../../images/elvenwarelogo.png" /></figure>
		<!-- #BeginEditable "body" -->

<h2>Android X86</h2>
		<ul>
			<li><a href="#installPart01">Installation Part I</a></li>
			<li><a href="#installPart02">Installation Part II</a></li>
			<li><a href="#network23">Networking in Android 2.3</a></li>
			<li><a href="#network40">Networking in Android 4.0 (Ice Cream 
			Sandwich)</a></li>
			<li><a href="#debugConnect">Connect to Debug</a></li>
			<li><a href="#resize">Resize or Modify a VDI Virtual Hard Drive</a></li>
			<li><a href="#avd">Install Applications using the Android Virtual 
			Debugger (AVD)</a></li>
			<li><a href="#links">Links</a></li>
		</ul>
		<p>
            Other Elvenware pages about Virtual Box:</p>
        <ul>
            <li><a href="http://www.elvenware.com/charlie/os/linux/VirtualBox.html">Linux Page</a></li>
            <li><a href="http://www.elvenware.com/charlie/development/cloud/virtualization.html">Cloud Virtualization</a></li>
        </ul>
        <p>
            &nbsp;</p>
		<h2 id="installPart01">Installation Part I</h2>

<p>You don't need a phone to run Android. You can install it on your PC or on a 
NetBook. You can even run Android inside a <a href="../design/virtualization.html">virtual machine</a>. 
In this article I describe how to load Android inside a VirtualBox VM. Running 
Android in VirtualBox is a great way to debug your projects as you develop them.</p>
		<p class="note"><strong>NOTE</strong>: If you are a 
developer, you know that you can also run Android emulation from the Android 
SDK, usually in conjunction with Eclipse. That is a useful option, but it tends 
to be much slower than what you get with Android running in VirtualBox.</p>

		<p>To get started, install 
		<a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a> and 
		the VirtualBox extension pack. Once that piece is 
		completed, you will need to download a copy of 
		<a href="http://www.android-x86.org/">Android X86</a>. </p>
		<p>There are nearly as many releases of Android X86 as there are 
		versions of Android. I used to recommend 
		getting Android 2.3 (Gingerbread) for the eeepc from ASUS (android-x86-2.3-RC1-eeepc.iso). 
		However, I find that with PhoneGap/Cordova 2.3.0 or later, you will have 
		trouble with Android x86 2.3, so I suggest going to Android x86 2.2 r2 
		(android-x86-2.2-r2-eeepc.iso), 
		or Android x86 4.0 (android-x86-4.0-RC2-eeepc.iso) or 3.2 for the eee PC. 
		When you go to the Android X86 site, you will find a link to download 
		various ISO files. Look for <strong>android-x86-4.0-RC2-eeepc.iso</strong>; that's Android 4.0 for the eee PC. Later versions are 
		of course appealing, but I have not had time to work with them yet. </p>
		<p class="note">NOTE: It was usually fairly easy to set up networking 
		for Android x86 2.3, which was why I liked it, 
		3.2 is a bit trickier, but still relatively straight forward. I have 
		found Android x86, 4.0 R2 to be quite simple, particularly if all you 
		want to do is connect with the Android debugger. It is a bit trickier to 
		get 4.0 connected to the Internet, but still not particularly 
		challenging. These network issues are discussed later in this page.</p>
<ul>
	<li>Download Android for PC (x86) from <a href="http://www.android-x86.org/">
	http://www.android-x86.org/</a></li>
	<li>Watch <a href="http://youtu.be/LNgkRhsgzIc" target="_blank">Charlie's 
	install video</a>.</li>
	<li>See the <a href="http://www.android-x86.org/documents/installhowto">install 
	how-to</a> that can be used to supplement what I have written here.</li>
</ul>

<p>Here also is my summary the items to choose while going through the install.</p>
<p>Start by creating a new virtual machine in VirtualBox. </p>

		<p><strong>Important note</strong>: <em>If you are in one of Charlie's 
		classes in room N252, and you are currently using a machine hosted in 
		room N252, you should name your virtual machine N252. Don't call it 
		Android23sd, as shown below, instead call it N252. This only applies if 
		you are in N252, and using one of the school's computers. If you are 
		using your own laptop, then you can choose any name you want.</em> </p>

		<p>Here is what it looks like if you are not using N252 as a name:</p>
<p>
<img alt="VirtualBox Android Step 01" height="396" src="images/Androidx8601.png" width="609"></p>

<p>For base memory, I'm choosing 1024 MB (1 GB), though at home I usually select 2048 
MB (2 GB) since I have lots of RAM on those machines.</p>

<p>
<img alt="Virtual Box Android Install 1024 MB" height="396" src="images/Androidx8602.png" width="609"></p>

<p>Create a minimum 8GB VDI hard drive, but go to 16 GB if you have the room on 
your hard drive. It is possible to
<a href="http://www.elvenware.com/charlie/os/linux/VirtualBox.html#resize">
resize a virtual hard drive</a>, but you probably don't want to go through that 
process.</p>

<p>
<img alt="VirtualBox 8GB VDI Hard drive" height="430" src="images/Androidx8603.png" width="651"></p>

<p>The summary screen is worth a glance so you can check if everything worked 
out as planned:</p>

<p>
<img alt="VirtualBox Image Summary Screen" height="430" src="images/Androidx8604.png" width="651"></p>

<p>When you first run the image, you will be prompted to browse for the ISO file 
that you want to use. Browse across your hard drive and pick your ISO file. It 
will have a name similar to <strong>android-x86-4.0-RC2-eeepc.iso</strong>:</p>

<p>
<img alt="Virtual Box prompt for ISO" height="375" src="images/Androidx8604a.png" width="594"></p>
		<h3 id="installPart02">Installing Android Part II</h3>

<p>Now you will need to start the process of formatting your vritual drive and 
of installing Android. You should boot up (double click) your virtual machine 
and select the ISO file that you downloaded from the Internet. Here are some of 
the choices you make during the partitioning and formatting stage:&nbsp;</p>
<ul>
	<li>Create Modify Partiftions</li>
	<li><strong>New | Primary | Bootable | Write | Yes</strong></li>
	<li>Format with ext3. </li>
</ul>

<p>ext3 is a Linux file format, just as FAT or NTFS are typical Windows file 
formats. Here is what the screen looks like when you are installing Android to 
your newly created drive:</p>

<p>
<img alt="Formatting partititions" height="488" src="images/Androidx8605.png" width="736"></p>

<p>And here are some final steps in the install of Android to your virtual hard 
drive:</p>
<ul>
	<li>Install Boot Loader Grub - Yes (It is fine to choose yes if you are 
	using VirtualBox. For Linux, choose no and see the Links below. For windows, 
	you are on your own since choosing yes ruined my Windows partition.)</li>
	<li>Read-Write - Yes. The screen may go blank to blue for several 
	minutes. Patience!</li>
	<li>After a time you will get a prompt like: <strong>Create Fake SD Card</strong>, 
	answer yes. The screen looks like the Formatting screen. Just take the 
	default values such as a size of 2047.</li>
</ul>

<p>When you are done, shut down the VM. Go to the VirtualBox <strong>Settings | Storage
</strong>option, right click on the item listed as an IDE controller and remove the ISO or DVD drive, 
if it has not already been removed. 
The item you want to remove is highlighted in the screen shot shown below. You 
need to do this because you want to stop booting from the ISO file, and start 
booting from the virtual hard drive that you have created.</p>

		<p>
		<img class="leaveAlone" alt="Remove the ISO file"  src="images/VBoxRemoveIso.png"></p>

<h2 id="network23">Networking in Android</h2>

		<p>Please read this section regardless of which version of Android x86 
		you downloaded. Note, however, that if you are using Android x86 2.3, it is quite possible that you will not have to do anything to get 
		networking set up in your Android Virtual Machine. You might also be 
		able to connect Android 4.0 with ADB with no other work than setting up 
		the <strong>Bridged Adapter</strong>. Nevertheless, you 
		should make some quick checks to be sure you are good to go. </p>

		<p>To get networking up and running, select your Virtual Machine in the 
		VirtualBox selection pane. Then choose <strong>Settings | Network </strong>
		from the VirtualBox menu and choose NAT. Under <strong>Advanced</strong>, 
choose <strong>PCnet-FAST III</strong>. At this stage, you may be good to go.</p>
		<p class="note">NOTE: NAT and Bridged Adapters are confusing terms for 
		many developers. Your VM is, for all intents and purposes, just another 
		computer on the network. It may be running in a VM, but it thinks it is 
		a regular OS running on real hardware. If you set up NAT networking, 
		then the host, which is VirtualBox in our case, will translate the network 
		addresses of messages sent to and from your VM. If you choose Bridged Adaptor, then 
		no translation takes place, instead, your VM looks and acts just like 
		another machine on the network. Since Bridged Adapters skip the step 
		of network address translation, they are naturally more efficient, and 
		they will automatically act like any other computer on the 
		network. It is, however, a bit more complicated to set up Bridged 
		Adaptors. Also, there are times when you don't really want a VM to be 
		registered on the network as a real machine. So, at times, NAT is your 
		best choice because it is simple, and because it keeps the machine out 
		of the network mix. Developers, however, often want a virtual machine to 
		act just like a regular computer, and hence they choose Bridged Adaptor. 
		I should add, however, that if you really want to understand what you 
		can do with NAT connections, you should look into 
		<a href="http://www.elvenware.com/charlie/os/linux/VirtualBox.html#forward">Port Forwarding</a>, which seems complicated at first, 
		but which ends up being fairly simple to understand and set up.</p>
		<p>For developers using NAT is not ideal, since you need to set 
up Port Forwarding and assign a port number in the VirtualBox setting if you 
		want to access it for debugging Android applications from Eclipse. 
		Therefore, you will probably find it simpler to set up a <strong>Bridged Adaptor</strong>, if you are a 
developer. But NAT will work fine if you are just an "end user." Furthermore, 
		you might want to test first with NAT, as that requires less setup, and 
		hence less room for error. If you are developer, and NAT is working, 
		then consider switching to Bridged Adaptor. (On Android x86, Bridged 
		Networking seems to just work, while I have not been able to setup NAT 
		properly. So it is an exception to the rule listed in this paragraph.)</p>

<p>To use the <strong>Bridged Adaptor</strong>, you will probably need a DHCP server on your 
network. If that is available, then in VirtualBox, choose <strong>Settings | 
Network | Bridged Adaptor. </strong>Again my type was <strong>PCnet-FAST III</strong>. The
<strong>name</strong> was automatically set to the name of my network card on my 
machine. The name of the adaptor should be filled in for you automatically, but 
if you need to find it, choose <strong>Control Panel | System and Security | 
System | Device Manager</strong> and Open up the <strong>Network Adaptors</strong> 
node. </p>
        <p class="note"><strong>NOTE</strong>: Right beneath <strong>Attached to: Bridged Adapter/Nat</strong> there is a field called <strong>Name</strong>. This is where you choose the physical network adapter (NIC) on your computer that you want to use. If you are on a laptop, there are usually two choices, one for your wireless connection, and one for your wired connection. If you are at work, school or a coffee shop, and using the wireless connection, then all might be fine. Then perhaps you go home, and you are not on the wireless network, but you are on the wired network. In that case you may to switch to the other adapter. We are not usually conscious of which network adapter we are using, but it is helpful to understand the choices available to us, and when which adapter is in play. For better or worse, VirtualBox and Android can help us become more aware of this aspect of our system!</p>
<p>
<img alt="Android Network setup with VirtualBox" height="491" src="images/Androidx8607.png" width="657"></p>

		<p>Here are some troubleshooting tips for folks with Android x86 2.3. Make sure you have:</p>
		<ul>
			<li>Selected your virtual machine in the VirtualBox selection pane on the left</li>
			<li>Go into the Settings for your Virtual Machine and choose the Network tab</li>
			<li>Set <strong>Attached to</strong> as Nat</li>
			<li>Under <strong>Advanced</strong>, set the <strong>Adapter type</strong> to 
			<strong>PCNet-Fast III</strong></li>
			<li>Start your virtual machine</li>
			<li>Choose <strong>Settings | Ethernet Connection</strong> and make sure the 
			<strong>Ethernet</strong> checkbox is checked</li>
			<li>Under <strong>Ethernet Configuration</strong>, make sure that Ethernet Devices is set to 
			<strong>eth0</strong></li>

		</ul>
			<p>If all of the above checks out, then you should be on the network, either right away, after rebooting the virtual machine. 
			If you are still having trouble, make sure that networking is setup 
			correctly on your machine. In particular, make sure you have a 
			working DHCP server on your network.</p>
		<h2 id="network40">Ice Cream Sandwich and Honeycomb Networking</h2>

		<p>
		My experiences with Ice Cream Sandwich (Android x86 4.0 eeepc RC2) have 
		been quite good. After setting up the Bridged Adaptor using PCnet-FAST 
		III (Am79C973), I was able to start up the Android VirtualBox VM and 
		connect to it immediately using ADB connect XXX, where XXX is the ip 
		address of my device, and I found the IP address by pressin Alt + F1 in 
		Android, and typing netcfg. With this configuration, my copy of Android 
		is not on the network in the sense that I can browse the Internet, but 
		it does enable me to connect with ADB, which is my real need. To get on 
		the Internet with Android 4.0, I had only to add the following to the 
		bottom of /etc/init.sh and then reboot:</p>
		<pre class="code">setprop net.dns1 8.8.8.8</pre>
		<p>
		In Honeycomb (3.2), I did the following. First I selected Alt-F1 to get 
		to the command prompt. I typed netcfg to confirm that I was not 
		connected to the network. When I issued the netcfg command, I saw that 
		eth0 was DOWN, which meant I was not connected to the network. Then I 
		called <strong>setprop</strong> and passed in the IP address of my DSN server: </p>
		<pre class="code">setprop net.dns1 [DNS IP]</pre>
		<p>To get the IP address for your DNS server, go to the Windows command 
		prompt and type <strong>ipconfig -all</strong>. Then scroll down and 
		look for the <strong>DNS servers</strong> entry. On my system, the DNS 
		server is 192.168.2.1, so I wrote:</p>
		<pre class="code">setprop net.dns1 192.168.2.1</pre>
		<p>
		Then I typed <strong>dhcpcd eth0 </strong>and I was done. To confirm 
		that I was on the network, I called <strong>netcfg</strong>, and this 
		time I found that <strong>eth0</strong> was <strong>UP</strong>.
		</p>
		<p>
		Here is the whole session 
		Android 3.2, from the time I first opened up the shell on 
		AndroidX86:</p>
		<p>
		<img alt="Connecting to the network from Android x86" height="285" src="images/Androidx8608.png" width="713"></p>
		<p>For more info, 
look at these stackoverflow threads:
		<a href="http://stackoverflow.com/questions/8227825/android-x86-porting-unable-to-make-it-work">
		here</a> and
<a href="http://stackoverflow.com/questions/10069121/no-network-in-android-x86-on-virtualbox-4-1-2">
here</a>.</p>

<h3>Keyboard Shortcuts</h3>

<ul>
	<li>Right Ctrl-I is how to capture the mouse. Sometimes you need to do this:<ul>
		<li>Click on window that holds that instance of Android</li>
		<li>Press Right Ctrl-I</li>
		<li>Press Escape</li>
		<li>Wiggle the mouse</li>
	</ul>
	</li>
	<li>Right Ctrl-Q sends the Quit signal.</li>
	<li>You can see a command prompt with Alt-F1. Switch back to graphics mode with 
Alt-F7.</li>
	<li>Escape for the back button, </li>
	<li>The menu key to unlock the machine (Usually found next to the right Ctrl 
	button.)</li>
</ul>

<p>At the command prompt, get you IP address by typing: <strong>netcfg</strong></p>
		<h2 id="debugConnect"><strong>Connect to Debug</strong></h2>
		<p>If you are developer, you will want to know how to set up debug 
		sessions for the code you write in Eclipse. Start by going to command 
		line, in the Android SDK <strong>platform-tools</strong> folder, and 
		typing the following, where 192.168.0.115 is the IP address that your 
		virtual device is using. You can get this IP address by selection Alt-F1 
		inside Android. That will take you to the command line. Now get the IP 
		address by running ifconfig of netcfg. Once you have the address, write 
		something like this, where the IP address you use will likely differ 
		from what is shown here:</p>
<pre><strong>adb connect 192.168.0.115</strong></pre>
<pre><strong>connected to 192.168.0.115:5555</strong></pre>
		<p>After you have connected to the device, go back to Eclipse. Run you 
		run your program, don't accidentally choose the emulator. Instead, 
		choose your copy of Android running in VirtualBox. See Figure 01 to see 
		what the moment of decision looks like. Obviously you don't want to 
		choose emulator-5554. Instead, choose another option, such as the 
		instance of VirtualBox run at a specific IP address on a specific port. 
		The actual IP address will, of course, likely differ in your case.</p>
<p><img alt="ADB Connect" height="471" src="images/AdbConnect.png" width="688"></p>
<p><strong>Figure 01: Here both the emulator and an instance of Andoird in 
VirtualBox are running. The VirtualBox instance is highlighted.</strong></p>

		<h2 id="resize">Modify a Hard Drive created with Virtual Box</h2>

<p>VirtualBox comes with a number of applications, or command line utilities, 
that you can use to query or modify the behavior of VirtualBox.</p>

<p>You might first want to explore the size of a VirtualBox VDI image using the 
showhtinfo command of the VBoxManage.exe application:</p>
<pre class="code">J:\VirtualBox\AndroidIceCream&gt;"c:\Program Files\Oracle\VirtualBox\VBoxManage.exe" showhdinfo AndriodIceCream.vdi
UUID: e9603964-8a41-4bb5-848b-167b3d293f49
Accessible: yes
Logical size: 8192 MBytes
Current size on disk: 1067 MBytes
Type: normal (base)
Storage format: VDI
Format variant: dynamic default
In use by VMs: AndriodIceCream (UUID: e818838b-30f5-4799-9c97-15736d24cb3b)
Location: J:\VirtualBox\AndroidIceCream\AndriodIceCream.vdi</pre>
<p>The next step will be to modify the VDI file. You can use the command line
help to see some of your options:</p>
<pre class="code"><strong>J:\VirtualBox\AndriodIceCream&gt;"c:\Program Files\Oracle\VirtualBox\VBoxManage.exe" modifyhd
Usage:

VBoxManage modifyhd &lt;uuid&gt;|&lt;filename&gt;
[--type normal|writethrough|immutable|shareable|
readonly|multiattach]
[--autoreset on|off]
[--compact]
[--resize &lt;megabytes&gt;|--resizebyte &lt;bytes&gt;]

J:\VirtualBox\AndriodIceCream&gt;</strong></pre>

<pre class="code">J:\VirtualBox\AndroidIceCream&gt;"c:\Program Files\Oracle\VirtualBox\VBoxManage.exe" modifyhd --resize 45000 AndroidIceCream.vdi
0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%

C:\Users\Charlie\VirtualBox VMs\AndroidVista&gt;</pre>

<p>This grows the harddrive to 45 GB. It happens very quickly.</p>

		<p>Don't forget that after you grow a virtual hard drive, you will 
		probably need to tell the operating system that you have made the 
		change. For instance, in Windows, you will want to go into the <strong>
		Control Panel | System Maintenance</strong> and choose <strong>Create 
		and format hard disk partitions</strong> from the <strong>Adminstrative 
		Tools</strong> section. You should then right click on your main 
		partition, and extend it so that it takes up the entire disk.</p>
		<h2 id="avd">
		<strong>Working with the AVD or Android x86 from the Command Line</strong></h2>

		<p>
		Here is and example of how to use the Android Virtual Debugger (AVD) to connect to Android x86 and install an 
		application. You can do all this from the command line of your Windows, 
		Linux or Mac. The example shown here uses Windows conventions, but it 
		should be obvious how to modify the commands for use on a MAC or Linux 
		Box:</p>
		<pre class="code">C:\Users\Charlie\Documents\android-sdk>cd platform-tools

cd C:\Users\Charlie\Documents\android-sdk\platform-tools>
adb connect 192.168.0.114
connected to 192.168.0.114:5555

adb install c:\Users\Charlie\workspace\AndEngineTest01\bin\AndEngineTest01.apk
4260 KB/s (397066 bytes in 0.091s)
        pkg: /data/local/tmp/AndEngineTest01.apk
Success</pre>

<ul>
<li>
			<a href="http://www.gadgetsdna.com/android-terminal-adb-shell-command-list/1168/">
			Adb terminal</a></li>
			<li>
			<a href="http://www.londatiga.net/it/how-to-use-android-adb-command-line-tool/">
			More adb terminal</a></li></ul>
		<h2 id="links">Links</h2>
<ul>
	<li>Android-x86 <a href="http://groups.google.com/group/android-x86">
	discussion group</a></li>
	<li>I run Linux, and want to <a href="http://www.ceh-photo.de/blog/?p=357">
	dual boot Linux and Android</a></li>
	<li>More on
	<a href="http://groups.google.com/group/android-x86/browse_thread/thread/ad727f345a15d5ba/dcbc0ff116de334a?lnk=gst&amp;q=grub+linux#dcbc0ff116de334a">
	double or triple bootting Linux</a></li>
	<li>
	<a href="http://www.android-x86.org/documents/virtualboxhowto" target="_blank">
	AndroidX86 VirtualBox Howto</a></li>
</ul>

<!--#include file="timers.inc" -->

		<!-- #EndEditable -->
	</article>
	<!--#include virtual="/charlie/footer.inc" -->
</div>

</body>

<!-- #EndTemplate -->

</html>
