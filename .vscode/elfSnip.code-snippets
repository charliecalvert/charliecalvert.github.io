{
	// Place your charliecalvert.github.io workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Import readFileSync": {
		"scope": "javascript,typescript",
		"prefix": "readFileSync",
		"body": [
			"import fs, { readFileSync } from 'node:fs';",
			"import { readFileSync } from 'node:fs';",
			"const buffer = readFileSync(new URL('./data.proto', import.meta.url));",
			"$1"
		],
		"description": "Log output to console"
	},
	"walkSimple":{
		"scope": "javascript,typescript",
		"prefix": "walkSimple",
		"body": [
			"import { walkSimple } from 'walk-directories';",
			"import { writeFileSync } from 'node:fs';",
			"const directory = `${process.env.CLOUDNOTES}/elvenware/development`;",
			"const ext = '.md';",
			"const fileInfos = await walkSimple(directory, ext)",
			".catch((error) => {",
			"debug('ERROR', error);",
			"throw new elfUtils.UserException('no infos');",
			"});",
			"if (fileInfos.length === 0) {",
			"throw new elfUtils.UserException('We received nothing');",
			"}",
			"for (const fileInfo of fileInfos) {",
			"console.log('fileInfo', fileInfo);",
			"processFile(fileInfo)",
			"}"
		]
	}

}

